<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lforme</title>
  <subtitle>一个博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-08T12:59:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>W.H.Y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Hexo使用</title>
    <link href="http://yoursite.com/2016/12/08/%E5%85%B3%E4%BA%8EHexo%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/12/08/关于Hexo使用/</id>
    <published>2016-12-08T12:56:52.000Z</published>
    <updated>2016-12-08T12:59:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Hexo使用"><a href="#关于Hexo使用" class="headerlink" title="关于Hexo使用"></a>关于Hexo使用</h1><p>@(hexo)[github pages|帮助]</p>
<p><strong>Hexo</strong>是一款快速搭建静态页面博客的工具, 依托于github pages的服务. 快速为个人搭建一个定制化极高的博客. (社区成熟, 主题多) 使用起来也是十分简单. 安装依托node.js:<br>npm install -g hexo-cli<br>由于国内使用npm安装<strong>缓慢</strong> 推荐用:</p>
<p><font color="green">npm install -g hexo-cli –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="external">http://registry.npm.taobao.org</a></font>  来安装.</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="Hexo使用"><a href="#Hexo使用" class="headerlink" title="Hexo使用"></a>Hexo使用</h2><blockquote>
<p>A fast, simple &amp; powerful blog framework, powered by Node.js.    —— <a href="https://www.npmjs.com/package/hexo" target="_blank" rel="external">Hexo官网</a></p>
</blockquote>
<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="external">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Cmd + /</code>查看帮助。 </p>
<h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init blog</div><div class="line">$ cd blog</div></pre></td></tr></table></figure>
<h3 id="开启本地游览"><a href="#开启本地游览" class="headerlink" title="开启本地游览"></a>开启本地游览</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<h3 id="发布一篇博客"><a href="#发布一篇博客" class="headerlink" title="发布一篇博客"></a>发布一篇博客</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"我的第一篇博客"</span></div></pre></td></tr></table></figure>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>更多关于 主题的使用, 可以到相关主题文档查阅. 他们的中文文档十分健全,就不搬运了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于Hexo使用&quot;&gt;&lt;a href=&quot;#关于Hexo使用&quot; class=&quot;headerlink&quot; title=&quot;关于Hexo使用&quot;&gt;&lt;/a&gt;关于Hexo使用&lt;/h1&gt;&lt;p&gt;@(hexo)[github pages|帮助]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hexo&lt;/strong&gt;是一款快速搭建静态页面博客的工具, 依托于github pages的服务. 快速为个人搭建一个定制化极高的博客. (社区成熟, 主题多) 使用起来也是十分简单. 安装依托node.js:&lt;br&gt;npm install -g hexo-cli&lt;br&gt;由于国内使用npm安装&lt;strong&gt;缓慢&lt;/strong&gt; 推荐用:&lt;/p&gt;
&lt;p&gt;&lt;font color=green&gt;npm install -g hexo-cli –registry=&lt;a href=&quot;http://registry.npm.taobao.org&quot;&gt;http://registry.npm.taobao.org&lt;/a&gt;&lt;/font&gt;  来安装.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>博客搬家了</title>
    <link href="http://yoursite.com/2016/12/07/%E5%8D%9A%E5%AE%A2%E6%90%AC%E5%AE%B6%E4%BA%86/"/>
    <id>http://yoursite.com/2016/12/07/博客搬家了/</id>
    <published>2016-12-07T07:28:52.000Z</published>
    <updated>2016-12-08T12:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前很早写在简书, 现在搬迁一下. - - </p>
<p>原文作者: <em>Written By : Debasis Das (17-Jan-2015)</em> <a href="http://www.knowstack.com/concurrency-nsoperationqueue-grand-central-dispatch/" title="原文" target="_blank" rel="external">原文地址</a><br>文章会给出一些关于这一话题的代码示例.</p>
<ul>
<li>什么是并发?</li>
<li>什么是<strong><em>NSOperationQueue</em></strong></li>
<li>介绍<strong><em>Introduction</em></strong>:</li>
<li><strong><em>NSInvocationOperation</em></strong></li>
<li><strong><em>NSBlockOperation</em></strong></li>
<li><strong><em>Operation</em></strong></li>
<li>什么是<strong><em>Dispatch Queues</em></strong></li>
<li><strong><em>Types of Dispatch Queues</em></strong></li>
<li><strong><em>NSOperationQueue 和 DispatchQueues</em></strong>的区别<a id="more"></a></li>
<li><strong><em>例子</em></strong><h2 id="什么是并发"><a href="#什么是并发" class="headerlink" title="什么是并发"></a>什么是并发</h2></li>
<li>在同一时间做这不同的事</li>
<li>充分利用CPU的性能</li>
<li>平行运行多个程序<h2 id="何时需要使用多线程"><a href="#何时需要使用多线程" class="headerlink" title="何时需要使用多线程"></a>何时需要使用多线程</h2></li>
<li>运行时需要处理复杂的逻辑, 耗时任务</li>
<li>处理独立任务,同时彼此又内联</li>
</ul>
<h2 id="Operations-and-Operation-Queue"><a href="#Operations-and-Operation-Queue" class="headerlink" title="Operations and Operation Queue"></a>Operations and Operation Queue</h2><ul>
<li>OPeration 是 NSOperation(抽象类)的派生类</li>
<li>Cocoa框架提供两个能直接使用的Operation:</li>
<li>NSInvocationOperation (used to execute a method)</li>
<li>NSBlockOperation (used for executing one or more blocks concurrently)</li>
<li>operation要被执行必须加入 OperationQueue 队列中</li>
</ul>
<h2 id="NSInvocationOperation"><a href="#NSInvocationOperation" class="headerlink" title="NSInvocationOperation"></a>NSInvocationOperation</h2><p>NSInvocationOperation 不需要被 子类化, 创建NSInvocationOperation的对象之后like this :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (NSOperation*)taskWithData:(id)data  &#123; </div><div class="line">NSInvocationOperation* theOp = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(myTaskMethod:) object:data]; </div><div class="line">return theOp;</div><div class="line">// This is the method that does the actual work of the task.</div><div class="line">&#125; </div><div class="line"></div><div class="line">- (void)myTaskMethod:(id)data &#123; </div><div class="line">// Perform the task.</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="NSBlockOperation"><a href="#NSBlockOperation" class="headerlink" title="NSBlockOperation"></a>NSBlockOperation</h2><p>NSBlockOperation 能添加多个Task block, 也支持直接使用:<br>通过addDependency可以设置队列依赖关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSBlockOperation* theOp = [NSBlockOperation blockOperationWithBlock: ^&#123; NSLog(@&quot;Beginning operation.\n&quot;); // Do some work.  </div><div class="line">&#125;]:</div></pre></td></tr></table></figure></p>
<h2 id="NSOperation-–-Writing-a-Custom-Operation"><a href="#NSOperation-–-Writing-a-Custom-Operation" class="headerlink" title="NSOperation – Writing a Custom Operation"></a>NSOperation – Writing a Custom Operation</h2><p>.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@interface KSCustomOperation : NSOperation</div><div class="line">&#123;</div><div class="line">BOOL executing;</div><div class="line">BOOL finished;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@property  (strong) NSDictionary *mainDataDictionary;</div><div class="line">-(id)initWithData:(id)dataDictionary;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>.m<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">@implementation KSCustomOperation</div><div class="line">-(id)initWithData:(id)dataDictionary</div><div class="line">&#123;</div><div class="line">if (self = [super init])</div><div class="line">&#123;</div><div class="line">_mainDataDictionary = dataDictionary;</div><div class="line">executing = NO;</div><div class="line">finished = NO;</div><div class="line"></div><div class="line">&#125;</div><div class="line">return self;</div><div class="line">&#125;</div><div class="line">-(void)start</div><div class="line">&#123;</div><div class="line">if ([self isCancelled]) &#123; // Must move the operation to the finished state if it is canceled. </div><div class="line">[self willChangeValueForKey:@&quot;isFinished&quot;];</div><div class="line">finished = YES; </div><div class="line">[self didChangeValueForKey:@&quot;isFinished&quot;]; </div><div class="line">return; </div><div class="line">// If the operation is not canceled, begin executing the task. </div><div class="line">[self willChangeValueForKey:@&quot;isExecuting&quot;]; </div><div class="line">[NSThread detachNewThreadSelector:@selector(main) toTarget:self withObject:nil];</div><div class="line">executing = YES; </div><div class="line">[self didChangeValueForKey:@&quot;isExecuting&quot;];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)main</div><div class="line">&#123;</div><div class="line">    //This is the method that will do the work</div><div class="line">    @try &#123;</div><div class="line">        NSLog(@&quot;Custom Operation - Main Method isMainThread?? ANS = %@&quot;,[NSThread isMainThread]? @&quot;YES&quot;:@&quot;NO&quot;);</div><div class="line">        NSLog(@&quot;Custom Operation - Main Method [NSThread currentThread] %@&quot;,[NSThread currentThread]);</div><div class="line">        NSLog(@&quot;Custom Operation - Main Method Try Block - Do Some work here&quot;);</div><div class="line">        NSLog(@&quot;Custom Operation - Main Method The data that was passed is %@&quot;,_mainDataDictionary);</div><div class="line">        for (int i = 0; i&lt;5; i++)</div><div class="line">        &#123;</div><div class="line">            NSLog(@&quot;i%d&quot;,i);</div><div class="line">            sleep(1); //Never put sleep in production code until and unless the situation demands. A sleep is induced here to demonstrate a scenario that takes some time to complete</div><div class="line">        &#125;</div><div class="line">        [self willChangeValueForKey:@&quot;isExecuting&quot;];</div><div class="line">        executing = NO;</div><div class="line">        [self didChangeValueForKey:@&quot;isExecuting&quot;];</div><div class="line">        </div><div class="line">        [self willChangeValueForKey:@&quot;isFinished&quot;];</div><div class="line">        finished = YES;</div><div class="line">        [self didChangeValueForKey:@&quot;isFinished&quot;];</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    @catch (NSException *exception) &#123;</div><div class="line">        NSLog(@&quot;Catch the exception %@&quot;,[exception description]);</div><div class="line">    &#125;</div><div class="line">    @finally &#123;</div><div class="line">        NSLog(@&quot;Custom Operation - Main Method - Finally block&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(BOOL)isExecuting&#123;</div><div class="line">    return executing;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(BOOL)isFinished&#123;</div><div class="line">    return finished;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>简单说明一下, 无论是自定义的Operation还是 系统提供的 NSBlockOperation, NSInvocationOperation 当操作放入队列中开始执行的时候都是无法取消和暂停的.<br>只能取消和暂停还没有开始执行的队列.</p>
<h2 id="DISPATCH-QUEUES"><a href="#DISPATCH-QUEUES" class="headerlink" title="DISPATCH QUEUES"></a>DISPATCH QUEUES</h2><ul>
<li>dispatch queues 允许我们同步和异步执行我们的代码块</li>
<li>所有dispatch queues 都是先进先出原则</li>
<li>任务被加入dispatch queues中并不会马上执行, 和NSOperationqueen的区别</li>
<li>Dispatch Queue Types</li>
<li>串行(Serial)</li>
<li>并行(Concurrent) Global Dispatch Queue</li>
<li>主队列(Main Dispatch Queue) 主线程(串行)<br>我们可以通过dispatch group来管理队列之间的依赖关系</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前很早写在简书, 现在搬迁一下. - - &lt;/p&gt;
&lt;p&gt;原文作者: &lt;em&gt;Written By : Debasis Das (17-Jan-2015)&lt;/em&gt; &lt;a href=&quot;http://www.knowstack.com/concurrency-nsoperationqueue-grand-central-dispatch/&quot; title=&quot;原文&quot;&gt;原文地址&lt;/a&gt;&lt;br&gt;文章会给出一些关于这一话题的代码示例.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是并发?&lt;/li&gt;
&lt;li&gt;什么是&lt;strong&gt;&lt;em&gt;NSOperationQueue&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;介绍&lt;strong&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;NSInvocationOperation&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;NSBlockOperation&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Operation&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;什么是&lt;strong&gt;&lt;em&gt;Dispatch Queues&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Types of Dispatch Queues&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;NSOperationQueue 和 DispatchQueues&lt;/em&gt;&lt;/strong&gt;的区别
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="OC" scheme="http://yoursite.com/tags/OC/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
</feed>
